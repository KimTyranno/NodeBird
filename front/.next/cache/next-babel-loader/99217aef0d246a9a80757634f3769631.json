{"ast":null,"code":"import { all, fork, takeLatest, delay } from \"@redux-saga/core/effects\";\nimport axios from \"axios\";\n\nfunction addPostAPI(data) {\n  return axios.post(\"/api/login\", data);\n}\n\nfunction* addPost(action) {\n  try {\n    yield delay(1000); // const result = yield call(addPostAPI, action.data); //아직 서버없어서 delay로 더미데이터 처리함\n\n    yield put({\n      type: \"ADD_POST_SUCCESS\",\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: \"ADD_POST_FAILURE\",\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(\"ADD_POST_REQUEST\", addPost);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost)]);\n}","map":{"version":3,"sources":["D:/study/Inflearn/react-nodebird/front/sagas/post.js"],"names":["all","fork","takeLatest","delay","axios","addPostAPI","data","post","addPost","action","put","type","result","err","response","watchAddPost","postSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,KAAhC,QAA6C,0BAA7C;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAASC,UAAT,CAAoBC,IAApB,EAA0B;AACxB,SAAOF,KAAK,CAACG,IAAN,CAAW,YAAX,EAAyBD,IAAzB,CAAP;AACD;;AAED,UAAUE,OAAV,CAAkBC,MAAlB,EAA0B;AACxB,MAAI;AACF,UAAMN,KAAK,CAAC,IAAD,CAAX,CADE,CAEF;;AACA,UAAMO,GAAG,CAAC;AACRC,MAAAA,IAAI,EAAE,kBADE;AAERL,MAAAA,IAAI,EAAEM,MAAM,CAACN;AAFL,KAAD,CAAT;AAID,GAPD,CAOE,OAAOO,GAAP,EAAY;AACZ,UAAMH,GAAG,CAAC;AACRC,MAAAA,IAAI,EAAE,kBADE;AAERL,MAAAA,IAAI,EAAEO,GAAG,CAACC,QAAJ,CAAaR;AAFX,KAAD,CAAT;AAID;AACF;;AAED,UAAUS,YAAV,GAAyB;AACvB,QAAMb,UAAU,CAAC,kBAAD,EAAqBM,OAArB,CAAhB;AACD;;AACD,eAAe,UAAUQ,QAAV,GAAqB;AAClC,QAAMhB,GAAG,CAAC,CAACC,IAAI,CAACc,YAAD,CAAL,CAAD,CAAT;AACD","sourcesContent":["import { all, fork, takeLatest, delay } from \"@redux-saga/core/effects\";\r\nimport axios from \"axios\";\r\n\r\nfunction addPostAPI(data) {\r\n  return axios.post(\"/api/login\", data);\r\n}\r\n\r\nfunction* addPost(action) {\r\n  try {\r\n    yield delay(1000);\r\n    // const result = yield call(addPostAPI, action.data); //아직 서버없어서 delay로 더미데이터 처리함\r\n    yield put({\r\n      type: \"ADD_POST_SUCCESS\",\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: \"ADD_POST_FAILURE\",\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchAddPost() {\r\n  yield takeLatest(\"ADD_POST_REQUEST\", addPost);\r\n}\r\nexport default function* postSaga() {\r\n  yield all([fork(watchAddPost)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}