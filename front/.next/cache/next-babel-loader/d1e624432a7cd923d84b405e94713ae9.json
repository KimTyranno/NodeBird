{"ast":null,"code":"import { all, fork, takeLatest, delay, put } from \"@redux-saga/core/effects\";\nimport axios from \"axios\";\nimport shortid from \"shortid\";\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST } from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\n\nfunction addPostAPI(data) {\n  return axios.post(\"/api/post\", data);\n}\n\nfunction* addPost(action) {\n  try {\n    yield delay(1000); // const result = yield call(addPostAPI, action.data); //아직 서버없어서 delay로 더미데이터 처리함\n\n    const id = shortid.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    }); // 여기는 post에 관련된것들을 쓰지만 user의 데이터도 변경해야 하는경우\n    // 아래처럼 user의 reducer에서 액션을 하나 만들어서 post가 바뀔때 같이 dispatch 해준다.\n\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete(\"/api/post\", data);\n}\n\nfunction* removePost(action) {\n  console.log(\"리무브 포스트\");\n\n  try {\n    yield delay(1000); // const result = yield call(removePostAPI, action.data); //아직 서버없어서 delay로 더미데이터 처리함\n    // post 리듀서부분\n\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    }); // 아래는 user 리듀서부분\n\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postid}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    yield delay(1000); // const result = yield call(addCommentAPI, action.data); //아직 서버없어서 delay로 더미데이터 처리함\n\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILUREE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchReovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchReovePost), fork(watchAddComment)]);\n}","map":{"version":3,"sources":["D:/study/Inflearn/react-nodebird/front/sagas/post.js"],"names":["all","fork","takeLatest","delay","put","axios","shortid","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","ADD_POST_TO_ME","REMOVE_POST_OF_ME","addPostAPI","data","post","addPost","action","id","generate","type","content","err","response","removePostAPI","delete","removePost","console","log","REMOVE_POST_SUCCESS","addCommentAPI","postid","addComment","ADD_COMMENT_FAILUREE","watchAddPost","watchReovePost","watchAddComment","postSaga"],"mappings":"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","sourcesContent":["import { all, fork, takeLatest, delay, put } from \"@redux-saga/core/effects\";\r\nimport axios from \"axios\";\r\nimport shortid from \"shortid\";\r\nimport {\r\n  ADD_COMMENT_FAILURE,\r\n  ADD_COMMENT_REQUEST,\r\n  ADD_COMMENT_SUCCESS,\r\n  ADD_POST_FAILURE,\r\n  ADD_POST_REQUEST,\r\n  ADD_POST_SUCCESS,\r\n  REMOVE_POST_FAILURE,\r\n  REMOVE_POST_REQUEST,\r\n} from \"../reducers/post\";\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\r\n\r\nfunction addPostAPI(data) {\r\n  return axios.post(\"/api/post\", data);\r\n}\r\n\r\nfunction* addPost(action) {\r\n  try {\r\n    yield delay(1000);\r\n    // const result = yield call(addPostAPI, action.data); //아직 서버없어서 delay로 더미데이터 처리함\r\n    const id = shortid.generate();\r\n    yield put({\r\n      type: ADD_POST_SUCCESS,\r\n      data: {\r\n        id,\r\n        content: action.data,\r\n      },\r\n    });\r\n    // 여기는 post에 관련된것들을 쓰지만 user의 데이터도 변경해야 하는경우\r\n    // 아래처럼 user의 reducer에서 액션을 하나 만들어서 post가 바뀔때 같이 dispatch 해준다.\r\n    yield put({\r\n      type: ADD_POST_TO_ME,\r\n      data: id,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\nfunction removePostAPI(data) {\r\n  return axios.delete(\"/api/post\", data);\r\n}\r\n\r\nfunction* removePost(action) {\r\n  console.log(\"리무브 포스트\");\r\n  try {\r\n    yield delay(1000);\r\n    // const result = yield call(removePostAPI, action.data); //아직 서버없어서 delay로 더미데이터 처리함\r\n    // post 리듀서부분\r\n    yield put({\r\n      type: REMOVE_POST_SUCCESS,\r\n      data: action.data,\r\n    });\r\n    // 아래는 user 리듀서부분\r\n    yield put({\r\n      type: REMOVE_POST_OF_ME,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: REMOVE_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\nfunction addCommentAPI(data) {\r\n  return axios.post(`/api/post/${data.postid}/comment`, data);\r\n}\r\n\r\nfunction* addComment(action) {\r\n  try {\r\n    yield delay(1000);\r\n    // const result = yield call(addCommentAPI, action.data); //아직 서버없어서 delay로 더미데이터 처리함\r\n    yield put({\r\n      type: ADD_COMMENT_SUCCESS,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_COMMENT_FAILUREE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchAddPost() {\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\nfunction* watchReovePost() {\r\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\nfunction* watchAddComment() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\nexport default function* postSaga() {\r\n  yield all([fork(watchAddPost), fork(watchReovePost), fork(watchAddComment)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}