{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(login),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(logOut),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogin),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogOut),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(userSaga);\n\nimport { all, fork, delay, takeLatest } from \"@redux-saga/core/effects\";\nimport axios from \"axios\";\n\nfunction loginAPI(data) {\n  return axios.post(\"/api/login\", data);\n}\n\nfunction login(action) {\n  return _regeneratorRuntime.wrap(function login$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context.next = 5;\n          return put({\n            type: \"LOG_IN_SUCCESS\",\n            data: action.data\n          });\n\n        case 5:\n          _context.next = 11;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 11;\n          return put({\n            type: \"LOG_IN_FAILURE\",\n            data: _context.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n}\n\nfunction logOutAPI() {\n  return axios.post(\"/api/logout\");\n}\n\nfunction logOut() {\n  return _regeneratorRuntime.wrap(function logOut$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context2.next = 5;\n          return put({\n            type: \"LOG_OUT_SUCCESS\",\n            data: result.data\n          });\n\n        case 5:\n          _context2.next = 11;\n          break;\n\n        case 7:\n          _context2.prev = 7;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 11;\n          return put({\n            type: \"LOG_OUT_FAILURE\",\n            data: _context2.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 7]]);\n} // 이벤트 리스너같은 친구들임\n\n\nfunction watchLogin() {\n  return _regeneratorRuntime.wrap(function watchLogin$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return takeLatest(\"LOG_IN_REQUEST\", login);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nfunction watchLogOut() {\n  return _regeneratorRuntime.wrap(function watchLogOut$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(\"LOG_OUT_REQUEST\", logOut);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([fork(watchLogin), fork(watchLogOut)]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"sources":["D:/study/Inflearn/react-nodebird/front/sagas/user.js"],"names":["login","logOut","watchLogin","watchLogOut","userSaga","all","fork","delay","takeLatest","axios","loginAPI","data","post","action","put","type","response","logOutAPI","result"],"mappings":";;oDAOUA,K;qDAqBAC,M;qDAiBAC,U;qDAkBAC,W;qDAIeC,Q;;AAnEzB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,KAApB,EAA2BC,UAA3B,QAA6C,0BAA7C;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;AACtB,SAAOF,KAAK,CAACG,IAAN,CAAW,YAAX,EAAyBD,IAAzB,CAAP;AACD;;AAED,SAAUX,KAAV,CAAgBa,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKI,iBAAMN,KAAK,CAAC,IAAD,CAAX;;AALJ;AAAA;AAMI,iBAAMO,GAAG,CAAC;AACRC,YAAAA,IAAI,EAAE,gBADE;AAERJ,YAAAA,IAAI,EAAEE,MAAM,CAACF;AAFL,WAAD,CAAT;;AANJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAWI,iBAAMG,GAAG,CAAC;AACRC,YAAAA,IAAI,EAAE,gBADE;AAERJ,YAAAA,IAAI,EAAE,YAAIK,QAAJ,CAAaL;AAFX,WAAD,CAAT;;AAXJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAkBA,SAASM,SAAT,GAAqB;AACnB,SAAOR,KAAK,CAACG,IAAN,CAAW,aAAX,CAAP;AACD;;AACD,SAAUX,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGI,iBAAMM,KAAK,CAAC,IAAD,CAAX;;AAHJ;AAAA;AAII,iBAAMO,GAAG,CAAC;AACRC,YAAAA,IAAI,EAAE,iBADE;AAERJ,YAAAA,IAAI,EAAEO,MAAM,CAACP;AAFL,WAAD,CAAT;;AAJJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AASI,iBAAMG,GAAG,CAAC;AACRC,YAAAA,IAAI,EAAE,iBADE;AAERJ,YAAAA,IAAI,EAAE,aAAIK,QAAJ,CAAaL;AAFX,WAAD,CAAT;;AATJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAgBA;;;AACA,SAAUT,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBE,iBAAMM,UAAU,CAAC,gBAAD,EAAmBR,KAAnB,CAAhB;;AAhBF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAkBA,SAAUG,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMK,UAAU,CAAC,iBAAD,EAAoBP,MAApB,CAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUG,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMC,GAAG,CAAC,CAACC,IAAI,CAACJ,UAAD,CAAL,EAAmBI,IAAI,CAACH,WAAD,CAAvB,CAAD,CAAT;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, fork, delay, takeLatest } from \"@redux-saga/core/effects\";\r\nimport axios from \"axios\";\r\n\r\nfunction loginAPI(data) {\r\n  return axios.post(\"/api/login\", data);\r\n}\r\n\r\nfunction* login(action) {\r\n  try {\r\n    // fork, call로 매개변수를 넘길때 call(loginAPI(매개변수1,매개변수2..)) 가 아니라\r\n    // call(loginAPI, 매개변수1, 매개변수2...) 처럼 넣어줘야한다.\r\n    // const result = yield call(loginAPI, action.data);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: \"LOG_IN_SUCCESS\",\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: \"LOG_IN_FAILURE\",\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction logOutAPI() {\r\n  return axios.post(\"/api/logout\");\r\n}\r\nfunction* logOut() {\r\n  try {\r\n    // const result = yield call(logOutAPI);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: \"LOG_OUT_SUCCESS\",\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: \"LOG_OUT_FAILURE\",\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\n// 이벤트 리스너같은 친구들임\r\nfunction* watchLogin() {\r\n  // take는 LOG_IN이란 액션이 실행될때까지 기다림\r\n  // LOG_IN이란 액션이 실행되면 login을 실행시킴\r\n  // 1. 아래 코드는 한번밖에 실행안됨, 한번 실행하면 없어진다보면됨\r\n  // yield take(\"LOG_IN_REQUEST\", login);\r\n  // 2. while(true)를 해줌으로써 계속 실행시킬 수 있음\r\n  //   while(true){\r\n  //       yield take(\"LOG_IN_REQUEST\", login);\r\n  //   }\r\n  // 3. takeEvery로 while을 대체할 수 있다 (반복문은 좀 거시기하니깐..)\r\n  // 4. takeLatest는 클릭실수로 여러번 실행시켜도 마지막 실행시킨것만 실행함(앞에꺼 다 무시함)\r\n  // takeEvery는 몇번 눌리던 다 실행시켜버림\r\n  // takeLatest와 반대로 첫번째것만 실행시키는것은 takeLeading이다.\r\n  // 근데 takeLatest던 takeLeading이던 백엔드에 요청하는횟수는 같고, 응답이 온것만 그렇게 처리해주는것이므로 백엔드에서도 따로 처리해줘야함\r\n  // throttle은 시간을 지정해서 그 시간동안 요청을 제한시키는것도 있다.\r\n  // throttle(\"ADD_POST_REQUEST\", addPost, 2000)\r\n  yield takeLatest(\"LOG_IN_REQUEST\", login);\r\n}\r\nfunction* watchLogOut() {\r\n  yield takeLatest(\"LOG_OUT_REQUEST\", logOut);\r\n}\r\n\r\nexport default function* userSaga() {\r\n  yield all([fork(watchLogin), fork(watchLogOut)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}