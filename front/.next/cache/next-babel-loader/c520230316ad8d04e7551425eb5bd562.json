{"ast":null,"code":"import { all, fork, delay, takeLatest } from \"@redux-saga/core/effects\";\nimport axios from \"axios\";\n\nfunction loginAPI(data) {\n  return axios.post(\"/api/login\", data);\n}\n\nfunction* login(action) {\n  try {\n    // fork, call로 매개변수를 넘길때 call(loginAPI(매개변수1,매개변수2..)) 가 아니라\n    // call(loginAPI, 매개변수1, 매개변수2...) 처럼 넣어줘야한다.\n    // const result = yield call(loginAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: \"LOG_IN_SUCCESS\",\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: \"LOG_IN_FAILURE\",\n      data: err.response.data\n    });\n  }\n}\n\nfunction logOutAPI() {\n  return axios.post(\"/api/logout\");\n}\n\nfunction* logOut() {\n  try {\n    // const result = yield call(logOutAPI);\n    yield delay(1000);\n    yield put({\n      type: \"LOG_OUT_SUCCESS\",\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: \"LOG_OUT_FAILURE\",\n      data: err.response.data\n    });\n  }\n} // 이벤트 리스너같은 친구들임\n\n\nfunction* watchLogin() {\n  // take는 LOG_IN이란 액션이 실행될때까지 기다림\n  // LOG_IN이란 액션이 실행되면 login을 실행시킴\n  // 1. 아래 코드는 한번밖에 실행안됨, 한번 실행하면 없어진다보면됨\n  // yield take(\"LOG_IN_REQUEST\", login);\n  // 2. while(true)를 해줌으로써 계속 실행시킬 수 있음\n  //   while(true){\n  //       yield take(\"LOG_IN_REQUEST\", login);\n  //   }\n  // 3. takeEvery로 while을 대체할 수 있다 (반복문은 좀 거시기하니깐..)\n  // 4. takeLatest는 클릭실수로 여러번 실행시켜도 마지막 실행시킨것만 실행함(앞에꺼 다 무시함)\n  // takeEvery는 몇번 눌리던 다 실행시켜버림\n  // takeLatest와 반대로 첫번째것만 실행시키는것은 takeLeading이다.\n  // 근데 takeLatest던 takeLeading이던 백엔드에 요청하는횟수는 같고, 응답이 온것만 그렇게 처리해주는것이므로 백엔드에서도 따로 처리해줘야함\n  // throttle은 시간을 지정해서 그 시간동안 요청을 제한시키는것도 있다.\n  // throttle(\"ADD_POST_REQUEST\", addPost, 2000)\n  yield takeLatest(\"LOG_IN_REQUEST\", login);\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(\"LOG_OUT_REQUEST\", logOut);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin), fork(watchLogOut)]);\n}","map":{"version":3,"sources":["D:/study/Inflearn/react-nodebird/front/sagas/user.js"],"names":["all","fork","delay","takeLatest","axios","loginAPI","data","post","login","action","put","type","err","response","logOutAPI","logOut","result","watchLogin","watchLogOut","userSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,KAApB,EAA2BC,UAA3B,QAA6C,0BAA7C;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;AACtB,SAAOF,KAAK,CAACG,IAAN,CAAW,YAAX,EAAyBD,IAAzB,CAAP;AACD;;AAED,UAAUE,KAAV,CAAgBC,MAAhB,EAAwB;AACtB,MAAI;AACF;AACA;AACA;AACA,UAAMP,KAAK,CAAC,IAAD,CAAX;AACA,UAAMQ,GAAG,CAAC;AACRC,MAAAA,IAAI,EAAE,gBADE;AAERL,MAAAA,IAAI,EAAEG,MAAM,CAACH;AAFL,KAAD,CAAT;AAID,GATD,CASE,OAAOM,GAAP,EAAY;AACZ,UAAMF,GAAG,CAAC;AACRC,MAAAA,IAAI,EAAE,gBADE;AAERL,MAAAA,IAAI,EAAEM,GAAG,CAACC,QAAJ,CAAaP;AAFX,KAAD,CAAT;AAID;AACF;;AAED,SAASQ,SAAT,GAAqB;AACnB,SAAOV,KAAK,CAACG,IAAN,CAAW,aAAX,CAAP;AACD;;AACD,UAAUQ,MAAV,GAAmB;AACjB,MAAI;AACF;AACA,UAAMb,KAAK,CAAC,IAAD,CAAX;AACA,UAAMQ,GAAG,CAAC;AACRC,MAAAA,IAAI,EAAE,iBADE;AAERL,MAAAA,IAAI,EAAEU,MAAM,CAACV;AAFL,KAAD,CAAT;AAID,GAPD,CAOE,OAAOM,GAAP,EAAY;AACZ,UAAMF,GAAG,CAAC;AACRC,MAAAA,IAAI,EAAE,iBADE;AAERL,MAAAA,IAAI,EAAEM,GAAG,CAACC,QAAJ,CAAaP;AAFX,KAAD,CAAT;AAID;AACF,C,CAED;;;AACA,UAAUW,UAAV,GAAuB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAMd,UAAU,CAAC,gBAAD,EAAmBK,KAAnB,CAAhB;AACD;;AACD,UAAUU,WAAV,GAAwB;AACtB,QAAMf,UAAU,CAAC,iBAAD,EAAoBY,MAApB,CAAhB;AACD;;AAED,eAAe,UAAUI,QAAV,GAAqB;AAClC,QAAMnB,GAAG,CAAC,CAACC,IAAI,CAACgB,UAAD,CAAL,EAAmBhB,IAAI,CAACiB,WAAD,CAAvB,CAAD,CAAT;AACD","sourcesContent":["import { all, fork, delay, takeLatest } from \"@redux-saga/core/effects\";\r\nimport axios from \"axios\";\r\n\r\nfunction loginAPI(data) {\r\n  return axios.post(\"/api/login\", data);\r\n}\r\n\r\nfunction* login(action) {\r\n  try {\r\n    // fork, call로 매개변수를 넘길때 call(loginAPI(매개변수1,매개변수2..)) 가 아니라\r\n    // call(loginAPI, 매개변수1, 매개변수2...) 처럼 넣어줘야한다.\r\n    // const result = yield call(loginAPI, action.data);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: \"LOG_IN_SUCCESS\",\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: \"LOG_IN_FAILURE\",\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction logOutAPI() {\r\n  return axios.post(\"/api/logout\");\r\n}\r\nfunction* logOut() {\r\n  try {\r\n    // const result = yield call(logOutAPI);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: \"LOG_OUT_SUCCESS\",\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: \"LOG_OUT_FAILURE\",\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\n// 이벤트 리스너같은 친구들임\r\nfunction* watchLogin() {\r\n  // take는 LOG_IN이란 액션이 실행될때까지 기다림\r\n  // LOG_IN이란 액션이 실행되면 login을 실행시킴\r\n  // 1. 아래 코드는 한번밖에 실행안됨, 한번 실행하면 없어진다보면됨\r\n  // yield take(\"LOG_IN_REQUEST\", login);\r\n  // 2. while(true)를 해줌으로써 계속 실행시킬 수 있음\r\n  //   while(true){\r\n  //       yield take(\"LOG_IN_REQUEST\", login);\r\n  //   }\r\n  // 3. takeEvery로 while을 대체할 수 있다 (반복문은 좀 거시기하니깐..)\r\n  // 4. takeLatest는 클릭실수로 여러번 실행시켜도 마지막 실행시킨것만 실행함(앞에꺼 다 무시함)\r\n  // takeEvery는 몇번 눌리던 다 실행시켜버림\r\n  // takeLatest와 반대로 첫번째것만 실행시키는것은 takeLeading이다.\r\n  // 근데 takeLatest던 takeLeading이던 백엔드에 요청하는횟수는 같고, 응답이 온것만 그렇게 처리해주는것이므로 백엔드에서도 따로 처리해줘야함\r\n  // throttle은 시간을 지정해서 그 시간동안 요청을 제한시키는것도 있다.\r\n  // throttle(\"ADD_POST_REQUEST\", addPost, 2000)\r\n  yield takeLatest(\"LOG_IN_REQUEST\", login);\r\n}\r\nfunction* watchLogOut() {\r\n  yield takeLatest(\"LOG_OUT_REQUEST\", logOut);\r\n}\r\n\r\nexport default function* userSaga() {\r\n  yield all([fork(watchLogin), fork(watchLogOut)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}